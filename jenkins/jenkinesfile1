pipeline {
    agent any

    environment {
        // DockerHub credentials stored in Jenkins
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials-id')
        IMAGE_NAME = 'your-dockerhub-username/my-apache-app'
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone your Git repository
                git 'https://github.com/yourusername/your-repo.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    docker.build("${IMAGE_NAME}:${env.BUILD_ID}")
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                script {
                    // Login to DockerHub
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                        echo 'Successfully logged in to DockerHub'
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Tag and push the Docker image to DockerHub
                    docker.image("${IMAGE_NAME}:${env.BUILD_ID}").push()
                }
            }
        }

        stage('Deploy Docker Container') {
            steps {
                script {
                    // Use SSH to connect to the deployment server and pull/run the Docker container
                    sshagent(['ssh-credentials-id']) {
                        sh """
                        ssh your-user@your-server 'docker pull ${IMAGE_NAME}:${env.BUILD_ID} && \
                        docker stop my-app || true && \
                        docker rm my-app || true && \
                        docker run -d -p 80:80 --name my-app ${IMAGE_NAME}:${env.BUILD_ID}'
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Cleanup the workspace
            cleanWs()
        }
    }
}
